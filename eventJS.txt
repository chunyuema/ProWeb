# Browser event 
1. Mouse events:
- click – when the mouse clicks on an element (touchscreen devices generate it on a tap).
- contextmenu – when the mouse right-clicks on an element.
- mouseover / mouseout – when the mouse cursor comes over / leaves an element.
- mousedown / mouseup – when the mouse button is pressed / released over an element.
- mousemove – when the mouse is moved.
2. Keyboard events:
- keydown and keyup – when a keyboard key is pressed and released.
3. Form element events:
- submit – when the visitor submits a <form>.
- focus – when the visitor focuses on an element, e.g. on an <input>.
4. Document events:
- DOMContentLoaded – when the HTML is loaded and processed, DOM is fully built.
5. CSS events:
- transitionend – when a CSS-animation finishes.

# Event Handler
1. A handler can be set in HTML with an attribute named on<event>
<script>
  function countRabbits() {
    for(let i=1; i<=3; i++) {
      alert("Rabbit number " + i);
    }
  }
</script>
<input type="button" onclick="countRabbits()" value="Count rabbits!">

2. Event handler can also be set through the DOM property
<input id="elem" type="button" value="Click me">
<script>
  elem.onclick = function() {
    alert('Thank you');
  };
</script>

3. addEventListener and removeEventListener to add events on a bunch of elements
- element.addEventListener(event, handler, [options]);

4. this key words refers to the object / element which the event listener is attached to
5. When an event happens, the browser creates an event object, puts details into it and passes it as an argument to the handler. You have access to this object from within the fucntion
- event.type: 
- event.currentTarget: Element that handled the event. That’s exactly the same as this, unless the handler is an arrow function, or its this is bound to something else, then we can get the element from event.currentTarget.
- event.clientX; clientY: Window-relative coordinates of the cursor, for pointer events.