<html> = document.documentElement
<body> = document.body
<head> = document.head



# Working with Nodes: 
The childNodes collection lists all child nodes, including text nodes.
- document.body.childNodes
- elem.childNodes[0] === elem.firstChild
- elem.childNodes[elem.childNodes.length - 1] === elem.lastChild
Using for...of to iterate through the childNodes collections
- element.nextSibiling
- element.previousSibiling


# Working with Elements: 
- elem.children:  only those children that are element nodes.
- elem.firstElementChild, lastElementChild: first and last element children.
- elem.previousElementSibling, nextElementSibling : neighbor elements.
- elem.parentElement: parent element.
- elemA.contains(elemB) returns true if elemB is inside elemA (a descendant of elemA) or when elemA==elemB.


# Grabbing Elements: 
By far the most used are querySelector and querySelectorAll, but getElement(s)By* can be sporadically helpful or found in the old scripts.
Method	                 Searches by...	Can call on an element?	   Live?
querySelector	         CSS-selector	    ✔	                    -
querySelectorAll	     CSS-selector	    ✔	                    -
getElementById	             id	            -	                    -
getElementsByName	        name	        -	                    ✔
getElementsByTagName	    tag or '*'	    ✔	                    ✔
getElementsByClassName	   class	        ✔	                    ✔


# Node Properties: 
- elem.nodeType: use it to see if a node is a text or an element node. 
    - elem.nodeType == 1 for element nodes,
    - elem.nodeType == 3 for text nodes,
    - elem.nodeType == 9 for the document object
- elem.nodeName/tagName: For elements, tag name (uppercased unless XML-mode). For non-element nodes nodeName describes what it is.
    The tagName property exists only for Element nodes.
    The nodeName is defined for any Node 
- elem.innerHTML: the HTML content of the element. Can be modified.
- outerHTML: the full HTML of the element. A write operation into elem.outerHTML does not touch elem itself. Instead it gets replaced with the new HTML in the outer context.
- elem.nodeValue/data: content of a non-element node (text, comment). These two are almost the same, usually we use data. Can be modified.
- elem.textContent: text inside the element: HTML minus all <tags>. Writing into it puts the text inside the element, with all special characters and tags treated exactly as text. Can safely insert user-generated text and protect from unwanted HTML insertions.
- elem.hidden: When set to true, does the same as CSS display:none.
DOM nodes also have other properties depending on their class. 
For instance, <input> elements (HTMLInputElement) support value, type, while <a> elements (HTMLAnchorElement) support href etc. Most standard HTML attributes have a corresponding DOM property.